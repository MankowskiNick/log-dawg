"""
JSON formatting prompt builder for Stage 2 - Structured output generation
"""
from typing import List, Optional
from src.models.schemas import ParsedLogEntry, GitInfo, GitCommitInfo
from .base import BasePromptBuilder


class JsonFormattingPromptBuilder(BasePromptBuilder):
    """Builder for Stage 2 JSON formatting prompts"""
    
    def build_prompt(
        self, 
        narrative_report: str,
        parsed_log: ParsedLogEntry, 
        git_info: GitInfo, 
        recent_commits: Optional[List[GitCommitInfo]] = None,
        discovered_files: Optional[List] = None
    ) -> str:
        """Build JSON formatting prompt from narrative report"""
        
        prompt_parts = [
            "# JSON Formatting Task",
            "",
            "You are a data extraction specialist. Your task is to convert the following comprehensive diagnostic report into a specific JSON format.",
            "",
            "## Source Diagnostic Report",
            "",
            "```",
            narrative_report,
            "```",
            "",
            "## Original Context (for reference)",
            "",
            f"**Log Level:** {parsed_log.level}",
            f"**Service:** {parsed_log.service_name or 'Unknown'}",
            f"**Error Message:** {parsed_log.message[:200]}{'...' if len(parsed_log.message) > 200 else ''}",
            ""
        ]
        
        # Add relevant files context for JSON extraction
        if discovered_files:
            prompt_parts.extend([
                "## Available Code Files (for relevant_code_files field)",
                ""
            ])
            for file_info in discovered_files:
                prompt_parts.append(f"- {file_info.file_path}")
            prompt_parts.append("")
        
        # Add JSON formatting instructions
        prompt_parts.extend(self._get_json_formatting_instructions())
        
        return "\n".join(prompt_parts)
    
    def _get_json_formatting_instructions(self) -> List[str]:
        """Get the JSON formatting instructions"""
        return [
            "## ‚ö†Ô∏è CRITICAL REQUIREMENT: EXTRACT TO STRUCTURED JSON WITH RICH MARKDOWN ‚ö†Ô∏è",
            "",
            "**YOU MUST EXTRACT THE INFORMATION FROM THE DIAGNOSTIC REPORT AND RETURN IT AS A VALID JSON OBJECT WITH ENHANCED MARKDOWN FORMATTING.**",
            "",
            "Your response must be a single, valid JSON object with the following exact structure:",
            "",
            "```json",
            "{",
            '  "title": "Concise error title (max 60 characters)",',
            '  "error_type": "Extract the most specific error type from the diagnostic report (e.g., \'System.NullReferenceException\', \'FileNotFoundException\', \'SqlTimeoutException\', \'HTTP 404 Error\'). Use the actual exception name or error type when available, otherwise use a descriptive category.",',
            '  "summary": "Brief 2-3 sentence summary with **key technical terms** highlighted and `code elements` formatted",',
            '  "root_cause": "Detailed analysis with:\\n\\n- **Structured bullet points**\\n- `inline code` references\\n- ```language\\ncode blocks with syntax highlighting\\n```\\n- File references: `path/to/file.ext:line_number`\\n- **Bold technical concepts**",',
            '  "error_analysis": "Technical breakdown with:\\n\\n- **Bold technical terms** and error patterns\\n- `inline code references` and variables\\n- ```language\\nformatted code blocks\\n```\\n- Line-by-line analysis with specific details\\n- Stack trace interpretation with **key findings**",',
            '  "recommendations": [',
            '    "**Immediate Action:** Modify `file.ext` at line X\\n\\n```language\\ncode example showing the fix\\n```\\n\\nTest the change by running `command`",',
            '    "**Configuration Update:** Update the following setting:\\n\\n```json\\n{\\\"setting\\\": \\\"new_value\\\"}\\n```\\n\\nThis will resolve the **configuration issue**",',
            '    "**Long-term Prevention:** \\n\\n- Implement `error handling` in critical paths\\n- Add **monitoring** for similar issues\\n- Update documentation with `code examples`"',
            '  ],',
            '  "confidence_score": 0.85,',
            '  "relevant_code_files": [',
            '    "path/to/relevant/file1.ext",',
            '    "path/to/relevant/file2.ext"',
            '  ]',
            "}",
            "```",
            "",
            "## üîç EXTRACTION RULES:",
            "",
            "1. **Extract, don't create**: Use information directly from the diagnostic report",
            "2. **Preserve technical details**: Keep code references, file names, and line numbers",
            "3. **Maintain accuracy**: Don't add information not present in the report",
            "4. **Categorize properly**: Choose the most appropriate error_type from the list",
            "5. **Quantify confidence**: Base confidence_score on the report's certainty indicators",
            "6. **NO SECTION HEADERS**: Do not include markdown headers (# ## ###) - the web app handles titles",
            "7. **Rich formatting**: Use **bold**, `inline code`, and ```code blocks``` extensively",
            "",
            "## üìã FIELD EXTRACTION GUIDELINES:",
            "",
            "### title",
            "- Extract a concise, descriptive title (max 60 characters)",
            "- Should capture the essence of the error",
            "- Use technical terms from the report",
            "",
            "### error_type",
            "- Extract the most specific error type mentioned in the diagnostic report",
            "- Prioritize actual exception names (e.g., 'System.NullReferenceException', 'FileNotFoundException')",
            "- Use descriptive categories only when specific types aren't available",
            "- Examples: 'System.NullReferenceException', 'SqlTimeoutException', 'HTTP 404 Error', 'Configuration Error'",
            "",
            "### summary",
            "- Extract 2-3 sentences that summarize the key findings",
            "- Use **bold** for key technical terms and error types",
            "- Use `backticks` for code elements, file names, and technical identifiers",
            "- Include impact and scope if mentioned",
            "",
            "### root_cause",
            "- Format as structured content with bullet points and rich markdown",
            "- Use **bold** for important concepts and findings",
            "- Use `backticks` for inline code, variables, and file references",
            "- Include ```language code blocks``` for relevant code snippets",
            "- Reference files as `path/to/file.ext:line_number` format",
            "- Maintain technical depth with proper formatting",
            "",
            "### error_analysis",
            "- Format with rich markdown for technical breakdown",
            "- Use **bold** for error patterns, technical terms, and key findings",
            "- Use `backticks` for code references, variables, and function names",
            "- Include ```language code blocks``` for stack traces and code examples",
            "- Structure with bullet points for clarity",
            "- Preserve exact error messages in `backticks` or code blocks",
            "",
            "### recommendations",
            "- Each recommendation should be richly formatted markdown",
            "- Start with **bold action type** (e.g., **Immediate Fix:**, **Configuration:**)",
            "- Use `backticks` for file names, commands, and code elements",
            "- Include ```language code blocks``` for code examples and fixes",
            "- Structure with bullet points for multi-step actions",
            "- Prioritize immediate, configuration, and long-term solutions",
            "",
            "### confidence_score",
            "- Extract or infer confidence level (0.0 to 1.0)",
            "- Look for confidence indicators in the report",
            "- Consider factors like: certainty of analysis, availability of context, clarity of error",
            "- Default ranges: 0.9+ (very confident), 0.7-0.9 (confident), 0.5-0.7 (moderate), <0.5 (uncertain)",
            "",
            "### relevant_code_files",
            "- Extract file paths mentioned in the analysis",
            "- Include files that were analyzed or referenced",
            "- Use the exact paths from the available code files list above",
            "- Only include files that are actually relevant to the error",
            "",
            "## üîß JSON FORMATTING REQUIREMENTS:",
            "",
            "1. **VALID JSON ONLY**: Your entire response must be parseable JSON",
            "2. **NO MARKDOWN**: Do not wrap in ```json``` code blocks",
            "3. **PROPER ESCAPING**: Escape quotes, newlines, and special characters",
            "4. **COMPLETE OBJECT**: Include all required fields",
            "5. **CONSISTENT TYPES**: Arrays must be arrays, numbers must be numbers",
            "",
            "## ‚ö†Ô∏è CRITICAL VALIDATION:",
            "",
            "Before submitting, verify:",
            "- [ ] Valid JSON syntax (no trailing commas, proper quotes)",
            "- [ ] All required fields present",
            "- [ ] error_type is specific and descriptive",
            "- [ ] confidence_score is between 0.0 and 1.0",
            "- [ ] recommendations is an array of strings",
            "- [ ] relevant_code_files contains valid file paths",
            "",
            "**CRITICAL: Your response must start with `{` and end with `}`. No other text before or after the JSON object.**",
            "",
            "## üìù FORMATTING EXAMPLES:",
            "",
            "### Example root_cause formatting:",
            '```',
            'The error occurs due to a **null pointer exception** in the `processRequest()` method.',
            '',
            '- The variable `userSession` is not properly initialized',
            '- Missing null check at `UserController.java:line_45`',
            '- Code snippet causing the issue:',
            '',
            '```java',
            'public void processRequest(HttpRequest request) {',
            '    String userId = userSession.getUserId(); // NPE here',
            '    // ... rest of method',
            '}',
            '```',
            '',
            'This happens when the **session timeout** occurs before the request is processed.',
            '```',
            "",
            "### Example recommendations formatting:",
            '```',
            '**Immediate Fix:** Add null check in `UserController.java` at line 45',
            '',
            '```java',
            'public void processRequest(HttpRequest request) {',
            '    if (userSession == null) {',
            '        throw new SessionExpiredException("User session expired");',
            '    }',
            '    String userId = userSession.getUserId();',
            '}',
            '```',
            '',
            'Test the fix by running `mvn test -Dtest=UserControllerTest`',
            '```'
        ]
